{
  parserClass="net.stefanfuchs.jslt.intellij.language.parser.JsltParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jslt"
  psiImplClassSuffix="Impl"
  psiPackage="net.stefanfuchs.jslt.intellij.language.psi"
  psiImplPackage="net.stefanfuchs.jslt.intellij.language.psi.impl"

  elementTypeHolderClass="net.stefanfuchs.jslt.intellij.language.psi.JsltTypes"
  elementTypeClass="net.stefanfuchs.jslt.intellij.language.psi.JsltElementType"
  tokenTypeClass="net.stefanfuchs.jslt.intellij.language.psi.JsltTokenType"

  psiImplUtilClass="net.stefanfuchs.jslt.intellij.language.psi.util.JsltPsiImplUtil"
}

jsltFile ::= {
    COMMENT*
    ImportDeclarations?
    (LetAssignment | FunctionDecl)*
    Expr? <<eof>>
}

Expr ::= OrExpr (PipeOperator OrExpr)*
OrExpr ::= AndExpr (OR OrExpr)?
AndExpr ::= ComparativeExpr (AND AndExpr())?
ComparativeExpr ::= AdditiveExpr (Comparator AdditiveExpr)?
Comparator ::=  EQUALS | UNEQUALS | BIGOREQ | BIGGER | SMALLER | SMALLOREQ  {name="'==', '!=', '>=', '>', '<', '<='"}
PipeOperator ::= PIPE {name="'|'"}
AdditiveExpr ::= MultiplicativeExpr (AdditiveOperator MultiplicativeExpr)*
AdditiveOperator ::= PLUS | MINUS  {name="'+', '-'"}
MultiplicativeExpr ::= BaseExpr (MultiplicativeOperator BaseExpr)*
MultiplicativeOperator ::= STAR | SLASH {name="'*', '/'"}
VariableUsage ::= VARIABLE  {
                                name="$variable"
                                mixin="net.stefanfuchs.jslt.intellij.language.psi.impl.JsltVariableUsageElementImpl"
                                implements="net.stefanfuchs.jslt.intellij.language.psi.JsltVariableUsageElement"
                                methods=[ getName setName getNameIdentifier getReference ]
                            }
BaseExpr ::= {
                NULL | INTEGER | DECIMAL | STRING | TRUE | FALSE |
                Chainable | ParenthesisExpr | IfStatement |
                Array |
                (Object | ObjectComprehension)
             } {name="expression"}
Chainable ::= {
                (FunctionCall | VariableUsage | DOT (IDENT | STRING)?)
                (ChainLink)?
              }
ChainLink ::= {
                (DotKey | ArraySlicing)
                (ChainLink)?
              }
ParenthesisExpr ::= LPAREN Expr RPAREN {pin=1}
DotKey ::= DOT (IDENT | STRING) {name=".identifier"}
ArraySlicingBody ::= Expr (ColonExpr Expr?)? | ColonExpr Expr {recoverWhile=ArrayBodyRecover name="array element"}
ArraySlicing ::= LBRACKET ArraySlicingBody RBRACKET {pin=1}
ColonExpr ::= COLON {name="':'"}
ArrayElements ::= Expr (COMMA Expr)* {name="array element"}
ArrayForBody ::= LetAssignment* Expr (IF ParenthesisExpr)?
ArrayFor ::= FOR ParenthesisExpr ArrayForBody {name="for(<expr>)"}
ArrayBody ::=ArrayFor | ArrayElements? {recoverWhile=ArrayBodyRecover methods=[ getExpressions ]}
Array ::= LBRACKET ArrayBody RBRACKET {pin=1 name="array" methods=[ getPresentation ]}
ObjectBody ::= LetAssignment* (Pairs | Matcher)? {recoverWhile=ObjectBodyRecover}
Object ::= LCURLY ObjectBody RCURLY {pin=1 name="object" methods=[ getPresentation ]}
Matcher ::= STAR MatcherMinus? COLON Expr {name="matcher" methods=[ getPresentation ]}
MatcherMinus ::= MINUS (IDENT | STRING) (COMMA (IDENT | STRING))* { name="- identifier [, identifier]" }
Pair ::= Expr COLON Expr {name="key : value" methods=[ getName getPresentation ]}
Pairs ::= {
               Pair
               (COMMA Pair)*
               (COMMA Matcher)?
          }
ObjectComprehensionBody ::= FOR ParenthesisExpr ObjectComprehensionForBody  {recoverWhile=ObjectBodyRecover}
ObjectComprehensionForBody ::= LetAssignment* Pair (IF ParenthesisExpr)?
ObjectComprehension ::= LCURLY ObjectComprehensionBody RCURLY  {pin=1 methods=[ getPresentation ]}
FunctionBody ::= LetAssignment* Expr
IfStatement ::= {
                  IF ParenthesisExpr
                    FunctionBody
                  ElseIfBranch*
                  ElseBranch?
                }  {pin=1}
ElseIfBranch ::= ELSE IF ParenthesisExpr FunctionBody  {pin=2}
ElseBranch ::= ELSE FunctionBody  {pin=1}
FunctionName ::= (IDENT | PIDENT) {
                                    name="function-name()"
                                    mixin="net.stefanfuchs.jslt.intellij.language.psi.impl.JsltFunctionNameElementImpl"
                                    implements="net.stefanfuchs.jslt.intellij.language.psi.JsltFunctionNameElement"
                                    methods=[ getName setName getNameIdentifier getImportAlias setImportAlias getReference ]
                                  }
FunctionCall ::= FunctionName LPAREN (Expr (COMMA Expr)*)? RPAREN {pin=2}
LetVariableDecl ::= VARIABLE_DECL {
                                    name="variable-name"
                                    mixin="net.stefanfuchs.jslt.intellij.language.psi.impl.JsltLetVariableDeclElementImpl"
                                    implements="net.stefanfuchs.jslt.intellij.language.psi.JsltLetVariableDeclElement"
                                    methods=[ isReferenceTo getName setName getNameIdentifier ]
                                 }
LetAssignment ::= LET LetVariableDecl ASSIGN Expr  {
                        pin=2
                        name="let variable-name = ..."
                        implements="com.intellij.psi.PsiNamedElement"
                        methods=[ getName setName getPresentation ]
                    }
FunctionDeclParamDecl ::= FUNCTION_DECL_PARAM {
                                                mixin="net.stefanfuchs.jslt.intellij.language.psi.impl.JsltFunctionDeclParamDeclElementImpl"
                                                implements="net.stefanfuchs.jslt.intellij.language.psi.JsltFunctionDeclParamDeclElement"
                                                methods=[ isReferenceTo getName setName getNameIdentifier ]
                                              }
FunctionDeclParamList ::= FunctionDeclParamDecl (COMMA FunctionDeclParamDecl)* {recoverWhile=FunctionDeclParamListRecover}
FunctionDeclNameDecl ::= FUNCTION_DECL_NAME {
                                                name="function-name"
                                                mixin="net.stefanfuchs.jslt.intellij.language.psi.impl.JsltFunctionDeclNameDeclElementImpl"
                                                implements="net.stefanfuchs.jslt.intellij.language.psi.JsltFunctionDeclNameDeclElement"
                                                methods=[ getName setName getNameIdentifier isReferenceTo ]
                                            }
FunctionDecl ::= {
                   DEF FunctionDeclNameDecl LPAREN FunctionDeclParamList? RPAREN
                     FunctionBody
                 } {
                    pin=2
                    name="def function-name()..."
                    methods=[ getName getNameIdentifier getPresentation getLetAssignmentList getExpr ]
                 }

ImportDeclarations ::= ImportDeclaration+
ImportDeclaration ::= IMPORT IMPORT_FILE_STRING AS IMPORT_ALIAS  {
                                            name="import"
                                            pin=1
                                            recoverWhile=ImportDeclarationRecover
                                            mixin="net.stefanfuchs.jslt.intellij.language.psi.impl.JsltImportDeclElementImpl"
                                            implements="net.stefanfuchs.jslt.intellij.language.psi.JsltImportDeclElement"
                                            methods=[ getName setName getNameIdentifier getPresentation getReference isReferenceTo ]
                                        }
private ArrayBodyRecover ::= !RBRACKET
private ExprRecover ::= !(RPAREN | COMMA)
private FunctionDeclParamListRecover ::= !RPAREN
private ImportDeclarationRecover ::= !(LET | DEF | IMPORT)
private ObjectBodyRecover ::= !RCURLY
